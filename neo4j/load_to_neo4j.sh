#!/usr/bin/env bash
# Load CSV graph files generated by digest_to_neo4j.py into a running Neo4j container.
#
# Default values can be overridden via environment variables:
#   NEO4J_CONTAINER   – Docker container name (default: neo4j)
#   NEO4J_USER        – Neo4j username (default: neo4j)
#   NEO4J_PASSWORD    – Neo4j password (default: graph1234)
#   IMPORT_DIR        – Directory holding nodes.csv + rel CSVs + import.cypher (default: neo4j_csv)
#
# Example:
#     ./load_to_neo4j.sh               # uses defaults
#     NEO4J_PASSWORD=myPass ./load_to_neo4j.sh
#     IMPORT_DIR=dist/graph ./load_to_neo4j.sh
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

NEO4J_CONTAINER="${NEO4J_CONTAINER:-neo4j}"
NEO4J_USER="${NEO4J_USER:-neo4j}"
NEO4J_PASSWORD="${NEO4J_PASSWORD:-graph1234}"
# Default import dir is sibling 'neo4j_csv' inside the same folder as this script
IMPORT_DIR="${IMPORT_DIR:-${SCRIPT_DIR}/neo4j_csv}"

if ! docker ps --format '{{.Names}}' | grep -q "^${NEO4J_CONTAINER}$"; then
  echo "Container '${NEO4J_CONTAINER}' is not running. Start it first (docker compose up -d)." >&2
  exit 1
fi

# Ensure import.cypher exists
if [[ ! -f "${IMPORT_DIR}/import.cypher" ]]; then
  echo "import.cypher not found in ${IMPORT_DIR}. Run digest_to_neo4j.py first." >&2
  exit 1
fi

# Empty existing graph
echo "Clearing existing nodes/relationships..."
docker exec -i "${NEO4J_CONTAINER}" cypher-shell -u "$NEO4J_USER" -p "$NEO4J_PASSWORD" "MATCH (n) DETACH DELETE n;"

echo "Running import.cypher inside container ${NEO4J_CONTAINER}..."
# Re-sync /import directory
docker cp "${IMPORT_DIR}"/. "${NEO4J_CONTAINER}:/import"

docker exec -i "${NEO4J_CONTAINER}" cypher-shell -u "$NEO4J_USER" -p "$NEO4J_PASSWORD" -f /import/import.cypher

echo "Import finished." 